# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block, everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Additonal external scripts and auto completions
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# tabtab source for serverless package
# uninstall by removing these lines or running `tabtab uninstall serverless`
[[ -f /usr/local/lib/node_modules/serverless/node_modules/tabtab/.completions/serverless.zsh ]] && . /usr/local/lib/node_modules/serverless/node_modules/tabtab/.completions/serverless.zsh
# tabtab source for sls package
# uninstall by removing these lines or running `tabtab uninstall sls`
[[ -f /usr/local/lib/node_modules/serverless/node_modules/tabtab/.completions/sls.zsh ]] && . /usr/local/lib/node_modules/serverless/node_modules/tabtab/.completions/sls.zsh
# tabtab source for slss package
# uninstall by removing these lines or running `tabtab uninstall slss`
[[ -f /usr/local/lib/node_modules/serverless/node_modules/tabtab/.completions/slss.zsh ]] && . /usr/local/lib/node_modules/serverless/node_modules/tabtab/.completions/slss.zsh

eval "$(jira --completion-script-zsh)"

eval "`pip3 completion --zsh`"
compctl -K _pip_completion pip3

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ -f ~/.p10k.zsh ]] && source ~/.p10k.zsh

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

# Source env specific profile stuff
if [[ -s "${ZDOTDIR:-$HOME}/.profile" ]]; then
  source "${ZDOTDIR:-$HOME}/.profile"
fi

# Source zsh command completions
if [[ -s "/usr/local/share/zsh/site-functions/aws_zsh_completer.sh" ]]; then
  source /usr/local/share/zsh/site-functions/aws_zsh_completer.sh
fi

# zsh auto suggestions
# Widgets that accept the entire suggestion
ZSH_AUTOSUGGEST_ACCEPT_WIDGETS=(
        end-of-line
        vi-forward-char
        vi-end-of-line
        vi-add-eol
)

# Widgets that accept the suggestion as far as the cursor moves
ZSH_AUTOSUGGEST_PARTIAL_ACCEPT_WIDGETS=(
        forward-word
        forward-char
        vi-forward-word
        vi-forward-word-end
        vi-forward-blank-word
        vi-forward-blank-word-end
)

# Key bindings
bindkey "^[[5~" history-beginning-search-backward # Page Up
bindkey "^[[6~" history-beginning-search-forward  # Page Down


bindkey '^f' vi-forward-word
bindkey '^b' vi-backward-word
bindkey '^x' fzf-cd-widget
bindkey '^z' fancy-ctrl-z

# Aliases
alias __='_ -s'
alias 7=7z

alias a='ctb time:start round'
alias bat='bat --style numbers,changes,snip'

alias b=brew
alias bc='brew cask'
alias bci='brew cask info'
alias bcin='brew cask install'
alias bcl='brew cask list'
alias bcr='brew cask remove'
alias bi='brew info'
alias bin='brew install'
alias bl='brew list'
alias br='brew remove'
alias bs='brew search'

alias c=cd
alias ctb='php /Users/eugen/Projekte/PHP/OpenSource/CTB/artisan'
alias df='df -H'
alias du='setopt CSH_NULL_GLOB && du -sch .[!.]* * |sort -h && unsetopt CSH_NULL_GLOB'

alias e='ctb time:stop round'

alias f='fd'
alias fzf='fzf --preview "head -100 {}"'

alias g=git
alias ga='git add'
alias gb='git branch'
alias gc='git commit'
alias gco='git checkout'
alias gd='git difftool'
alias gdg='git difftool -g'
alias gf='git fetch'
alias gl='git log'
alias gm='git merge'
alias gp='git pull --rebase'
alias gpm='git pull --no-rebase'
alias gpu='git push'
alias gr='git remote'
alias gs='git status'
alias gsp='git stash pop'
alias gst='git stash'
alias gsm='git submodule'

alias gg='googler --colors Bjdgxy'
alias iiff='idea diff'

if [[ -s /usr/local/bin/gls ]]; then
  alias l='/usr/local/bin/gls -lAh --group-directories-first --color'
else
  alias l='/bin/ls -lAh --group-directories-first --color'
fi

[ -s /usr/bin/pbcopy ] && alias cpy='/usr/bin/pbcopy'
[ -s /usr/bin/pbpaste ] && alias pst='/usr/bin/pbpaste'

alias p='cd ~/Projekte/iOS/H-Hotels'
alias piff='pstorm diff'
alias pip=pip3
alias python=python3

alias rg='rg -i'
alias rr='rm -rf'
alias sl=subl
[ -s /usr/local/bin/gsort ] && alias sort=gsort
alias ü='ctb time:overview'

# Functions
function ba {
  ctb time:start:book $1 $(datestamp $2 $3 $4)
}

function be {
  ctb time:end:book $1 $(datestamp $2 $3 $4)
}

function bz {
  ctb time:book $1 $2 $(datestamp $3 $4 $5)
}

function co {
  http https://covid19.trackercli.com/history/$1
}

function ds {
  open "dash://b:$*"
}

function fancy-ctrl-z {
  if [[ $#BUFFER -eq 0 ]]; then
    bg
    zle redisplay
  else
    zle push-input
  fi
}
zle -N fancy-ctrl-z

function ff {
  sudo fd $* /
}

function jira_stem {
  jira login && jira worklog add --noedit $1 $2 $3
}

function jira_timestamp {
  [ $1 ] && echo "-S$(datestamp $1 $2 $3)T00:00:00.000-0000" && return
}

function datestamp {
  [ $3 ] && echo "$3-$2-$1" && return
  [ $2 ] && echo "$(date +%Y-)$2-$1" && return
  [ $1 ] && echo "$(date +%Y-%m-)$1"
}

function t {
  jira_stem $1 -T0$2h $(jira_timestamp $3 $4 $5)
}

function th {
  jira_stem HHOTELS-$1 -T0$2h $(jira_timestamp $3 $4 $5)
}

function thm {
  jira_stem HHOTELS-2 -T0$1h $(jira_timestamp $2 $3 $4)
}

function thr {
  jira_stem HHOTELS-13 -T0$1h $(jira_timestamp $2 $3 $4)
}

function ti {
  jira_stem INT-33 -T0$1h $(jira_timestamp $2 $3 $4)
}

function tm {
  jira_stem INT-5 -T0$1h $(jira_timestamp $2 $3 $4)
}

function tmd {
  jira_stem INT-4 -T0$1h $(jira_timestamp $2 $3 $4)
}

function trr {
  jira_stem INT-2 -T0$1h $(jira_timestamp $2 $3 $4)
}

function u {
  brew upgrade
  echo '🍻  \e[1mBrew update finished 🍻 Upgrading Casks:\e[0m'
  brew cask upgrade
  echo '🍻  \e[1mBrew Cask upgrades finished 🍻 Updating zprezto:\e[0m'
  zprezto-update
}

# wat - a better and recursive which/whence
# 13apr2017  +leah+
# 02jan2018  +leah+  print function code
wat() {
  ( # constrain unalias
  for cmd; do
    if (( $+aliases[$cmd] )); then
      printf '%s: aliased to %s\n' $cmd $aliases[$cmd]
      local -a words=(${${(z)aliases[$cmd]}:#(*=*|rlwrap|noglob|command)})
      unalias $cmd
      if [[ $words[1] == '\'* ]]; then
        words[1]=${words[1]#'\'}
        unalias $words[1] 2>/dev/null
      fi
      wat $words[1]
    elif (( $+functions[$cmd] )); then
      whence -v $cmd
      whence -f $cmd
    elif (( $+commands[$cmd] )); then
      wat $commands[$cmd]
    elif [[ -h $cmd ]]; then
      file $cmd
      wat $cmd:A
    elif [[ -x $cmd ]]; then
      file $cmd
    else
      which $cmd
    fi
  done
  )
}
compdef wat=which

function x {
  print "\e[1mcount: $(ls -1 $1 | wc -l )\e[0m" && exa -lah --group-directories-first --git $1
}

function z {
  ctb time:list $(datestamp $1 $2 $3)
}
